import numpy as np
from itertools import combinations

nuc_spin = 0.5


def sp_states(pmax, spin):
    """Generates the single-particle states

    The states yielded have a quantum number p and spin s where 0 <= p <= pmax and -spin <= s <= spin.

    Parameters
    ----------
    pmax : int
        The maximum of the p quantum number
    spin : float
        The magnitude of the spin, e.g. 0.5

    Yields
    ------
    p : int
        The p quantum number
    s : float
        The projection of the spin
    """
    assert pmax >= 1, 'p levels run over [1,inf)'

    for p in range(1, pmax+1):
        s = -spin
        while s <= spin:
            yield p, s
            s += 1


def slater(n_particles, p_max, total_m, pairs_only=False):
    """Finds the possible slater determinants with a given total M.

    Parameters
    ----------
    n_particles : int
        The number of (single) particles
    p_max : int
        The maximum p quantum number, or half of the number of available states
    total_m : int or float
        The total spin projection desired

    Returns
    -------
    sds : ndarray
        The possible Slater determinants, as lists of indices. Each row represents a possible determinant, and each
        index corresponds to an index in the list generated by `sp_states`.
    """
    states = np.array(list(sp_states(p_max, nuc_spin)))
    indices = np.array(list(range(np.size(states, 0))))

    sds = []
    for x in combinations(indices, n_particles):
        s = states[list(x)]
        m = s.sum(0)[-1]
        if pairs_only:
            ps = s[:, 0].astype(int)
            bins = np.bincount(ps)
            paired = np.all(bins[bins.nonzero()] == 2)
            if m == total_m and paired:
                sds.append(x)
        else:
            if total_m == m:
                sds.append(x)

    return np.array(sds)

if __name__ == '__main__':
    print(slater(2, 2, 0, pairs_only=True))